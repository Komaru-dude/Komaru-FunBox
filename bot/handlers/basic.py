import random, aiohttp, os
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

base_router = Router()
current_dir = os.path.dirname(os.path.abspath(__file__))
media_folder = os.path.join(current_dir, '..', 'media')
sticker_extensions = {".webp", ".tgs", ".webm"}
API_URL = "http://127.0.0.1:8001"

async def fetch_json(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}")
            return await response.json()

@base_router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n"
                        "–≠—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç.\n"
                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö: /help")
    
@base_router.message(Command("random"))
async def cmd_random(message: Message):
    responses = [
        "–î–∞, –±–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π!",
        "–ù–µ—Ç, —ç—Ç–æ –Ω–µ —Å–±—É–¥–µ—Ç—Å—è.",
        "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –ø—Ä–∞–≤.",
        "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –¥–∞.",
        "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–µ—Ç.",
        "–Ø –±—ã —Å–∫–∞–∑–∞–ª –¥–∞.",
    ]
    response = random.choice(responses)
    await message.reply(response)

@base_router.message(Command("cancel"))
@base_router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω")

@base_router.message(Command('privetbradok'))
async def cmd_privebradok(message: Message):
    target_id = None
    first_name = None

    if message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
    else:
        text = message.text
        split_text = text.split(maxsplit=1)

        if len(split_text) > 1 and split_text[1].startswith("@"):
            username = split_text[1][1:]
            try:
                data = await fetch_json(f"{API_URL}/user/{username}")

                if "user_id" in data:
                    target_id = data["user_id"]
                    name_data = await fetch_json(f"{API_URL}/first_name/{message.chat.id}/{target_id}")
                    first_name = name_data.get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                else:
                    await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return

            except Exception as e:
                await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
                return
        elif len(split_text) > 1 and split_text[1].isdigit():
            target_id = split_text[1]
            try:
                data = await fetch_json(f"{API_URL}/first_name/{message.chat.id}/{target_id}")
                first_name = data.get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            except Exception as e:
                await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
                return
        else:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–π, @username –∏–ª–∏ –∞–π–¥–∏.")
            return

    user2_link = f'<a href="tg://user?id={target_id}">{first_name}</a>'

    stick = random.choice([True, False])

    if message.reply_to_message and not stick:
         await message.reply_to_message.reply(f"–ü—Ä–∏–≤–µ—Ç {user2_link}!", parse_mode=ParseMode.HTML)
    elif not stick:
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç {user2_link}!", parse_mode=ParseMode.HTML)
    else:
        stickers = [f for f in os.listdir(media_folder) if os.path.splitext(f)[1].lower() in sticker_extensions]
        if not stickers:
            raise FileNotFoundError("–ù–µ—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ ../media")
        random_stick = random.choice(stickers)
        sticker = FSInputFile(os.path.join(media_folder, random_stick))
        if message.reply_to_message:
            await message.reply_to_message.reply_sticker(sticker)
        else:
            await message.reply_sticker(sticker)

@base_router.message(Command("say"))
async def cmd_say(message: Message):
    split_text = message.text.split(maxsplit=1)
    if len(split_text) > 1:
        await message.answer(split_text[1])
        try:
            await message.delete()
        except:
            await message.answer("–ë—Ä–∞–¥–æ—á–∫–∏, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π üò¢")
    else:
        await message.reply("–ê —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ?")