import json
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot import db
from pathlib import Path

rp_router = Router()
BASE_COMMANDS_PATH = Path("bot/basic_rp.json")
CUSTOM_DIR = Path("data/rp_commands")
CUSTOM_DIR.mkdir(parents=True, exist_ok=True)

def load_commands(path: Path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_custom_commands(chat_id: int, commands: dict):
    custom_path = CUSTOM_DIR / f"{chat_id}.json"
    with open(custom_path, "w", encoding="utf-8") as f:
        json.dump(commands, f, ensure_ascii=False, indent=2)

def get_chat_commands(chat_id: int):
    custom_path = CUSTOM_DIR / f"{chat_id}.json"
    
    if custom_path.exists():
        custom_commands = {cmd["command"]: cmd for cmd in load_commands(custom_path)}
        return custom_commands
    
    return {}

@rp_router.message(Command("rp_setup"))
async def cmd_rp_setup(message: Message):
    user_id = message.from_user.id

    if message.chat.type == "private" or message.chat.type == "channel":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö")
        return

    if not db.has_permission(user_id, 2):
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–î–∞", callback_data="Yes"))
    builder.add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="No"))

    await message.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ —Å–±—Ä–æ—Å—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ (/rp_list)", reply_markup=builder.as_markup())

@rp_router.callback_query(F.data == "Yes")
async def rp_setup_yes(callback: CallbackQuery):
    await callback.message.reply("–£—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ!")
    chat_id = callback.message.chat.id
    base_commands = load_commands(BASE_COMMANDS_PATH)
    save_custom_commands(chat_id, base_commands)

@rp_router.callback_query(F.data == "No")
async def rp_setup_no(callback: CallbackQuery):
    await callback.message.reply("–û—Ç–º–µ–Ω–∞")

@rp_router.message(Command("rp_list"))
async def cmd_rp_list(message: Message):
    chat_id = message.chat.id
    commands = get_chat_commands(chat_id)

    if message.chat.type == "private" or message.chat.type == "channel":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö")
        return
    
    if not commands:
        await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RP-–∫–æ–º–∞–Ω–¥.")
        return
    
    command_list = "\n".join(f"{cmd['command']} - {cmd['description']}" for cmd in commands.values())
    await message.reply(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ RP-–∫–æ–º–∞–Ω–¥—ã:\n{command_list}")

class AddRpCommandStates(StatesGroup):
    waiting_for_command_name = State()
    waiting_for_description = State()
    waiting_for_messages = State()

@rp_router.message(Command("rp_add"))
async def cmd_rp_add(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if message.chat.type == "private" or message.chat.type == "channel":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö")
        return

    if not db.has_permission(user_id, 2):
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer(
        "üõ† –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é RP-–∫–æ–º–∞–Ω–¥—É!\n\n"
        "–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ /)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–æ–±–Ω—è—Ç—å</code>\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode=ParseMode.HTML)
    await state.set_state(AddRpCommandStates.waiting_for_command_name)

@rp_router.message(AddRpCommandStates.waiting_for_command_name)
async def process_command_name(message: Message, state: FSMContext):
    command_name = message.text.strip().lower()
    chat_id = message.chat.id
    
    if len(command_name) > 20:
        await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
        
    cur_commands = get_chat_commands(chat_id)
    
    if command_name in cur_commands:
        await message.reply("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    await state.update_data(command_name=command_name)
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å:\n\n"
        "–®–∞–≥ 2/3: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–û–±–Ω—è—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode=ParseMode.HTML)
    await state.set_state(AddRpCommandStates.waiting_for_description)

@rp_router.message(AddRpCommandStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    description = message.text.strip()
    
    if len(description) > 20:
        await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
        
    if not description:
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(description=description)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–∏–º–≤–æ–ª–æ–º |\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>{user1} –æ–±–Ω—è–ª {user2}|{user1} –Ω–µ–∂–Ω–æ –ø—Ä–∏–∂–∞–ª –∫ –≥—Ä—É–¥–∏ {user2}</code>\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode=ParseMode.HTML)
    await state.set_state(AddRpCommandStates.waiting_for_messages)

@rp_router.message(AddRpCommandStates.waiting_for_messages)
async def process_messages(message: Message, state: FSMContext):
    chat_id = message.chat.id
    messages_raw = message.text.strip()
    messages_list = [msg.strip() for msg in messages_raw.split("|") if msg.strip()]
    
    if not messages_list:
        await message.reply("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    command_name = data['command_name']
    description = data['description']
    cur_commands = get_chat_commands(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(messages_list) > 4:
        await message.reply("‚ö†Ô∏è –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 4.")
        messages_list = messages_list[:4]
    
    cur_commands[command_name] = {
        "command": command_name,
        "description": description,
        "messages": messages_list
    }
    
    save_custom_commands(chat_id, list(cur_commands.values()))
    
    await message.answer(
        f"üéâ –ö–æ–º–∞–Ω–¥–∞ <code>{command_name}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"üí¨ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π:\n" + "\n".join(f"‚Ä¢ {msg}" for msg in messages_list), parse_mode=ParseMode.HTML)
    await state.clear()

@rp_router.message(Command("rp_remove"))
async def cmd_rp_remove(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if message.chat.type == "private" or message.chat.type == "channel":
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö")
        return

    if not db.has_permission(user_id, 2):
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rp_remove <–∫–æ–º–∞–Ω–¥–∞>")
        return

    command_name = parts[1].strip()

    cur_commands = get_chat_commands(chat_id)

    if command_name not in cur_commands:
        await message.reply("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    del cur_commands[command_name]
    save_custom_commands(chat_id, list(cur_commands.values()))
    await message.reply(f"–ö–æ–º–∞–Ω–¥–∞ {command_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
