from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
import pytz

time_router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
moscow_tz = pytz.timezone('Europe/Moscow')
krsk_tz = pytz.timezone('Asia/Krasnoyarsk')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ 2025
@time_router.message(Command("new_year"))
async def time_to_new_year(message: Message):
    command = message.text.strip().split()
    tz = moscow_tz  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    if len(command) > 1 and command[1].lower() == "krsk":
        tz = krsk_tz  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "krsk"

    event_date = datetime(2025, 1, 1, tzinfo=tz)
    now = datetime.now(tz)
    time_delta = event_date - now

    if time_delta.days <= 0 and time_delta.seconds <= 0:
        await message.reply("üéâ –£–†–ê! 2025 –≥–æ–¥ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª!")
        return

    days = time_delta.days
    hours, remainder = divmod(time_delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    await message.reply(
        f"–î–æ 2025 –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥!"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ—à–µ–∫
@time_router.message(Command("birthdays"))
async def cats_birthdays(message: Message):
    command = message.text.strip().split()
    tz = moscow_tz  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    if len(command) > 1 and command[1].lower() == "krsk":
        tz = krsk_tz  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "krsk"

    cats = {
        "–ö–æ–º—É–≥–∏": datetime(2016, 3, 23),
        "–ö–æ–º–∞—Ä—É": datetime(2017, 5, 22),
        "–ö–æ–∫–æ–∞(–≤–æ–∏–Ω –∫—É–∫—É—Ä—É–∑–Ω—ã—Ö –ø–æ–ª–µ–π)": datetime(2019, 5, 12),
        "–ü–∞–Ω—á–∞–Ω(–ü–ê–ù–¢–Ø–Ø–Ø–Ø–Ø–Ø–Ø–Ø)": datetime(2016, 12, 13),
        "–ì–æ–º–∞": datetime(2013, 10, 20),
        "–¢–æ–±–æ-–∫—É–Ω": datetime(2018, 4, 25),
        "–°—É—É": datetime(2015, 2, 14),
        "–ì–æ—Ä–æ–º–∞—Ä—É": datetime(2015, 11, 10),
    }

    now = datetime.now(tz)
    responses = []

    for name, birthday in cats.items():
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        next_birthday = birthday.replace(year=now.year, tzinfo=tz)
        if next_birthday < now:
            next_birthday = next_birthday.replace(year=now.year + 1)

        if next_birthday.date() == now.date():
            responses.append(f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ü–æ–∑–¥—Ä–∞–≤—å—Ç–µ –∫–æ—à–∫—É! üéÇ")
        else:
            time_delta = next_birthday - now
            days = time_delta.days
            hours, remainder = divmod(time_delta.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            responses.append(
                f"{name}: —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥ (–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {next_birthday.date()}).\n"
            )

    await message.reply("\n".join(responses))